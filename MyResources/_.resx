<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ABIsExecuted" xml:space="preserve">
    <value>[{0} {1}] has been executed in result of citizen actions.</value>
  </data>
  <data name="AHasBeenKilledByWerewolves" xml:space="preserve">
    <value>{0} has been killed by werewolves mercilessly.</value>
  </data>
  <data name="AIsGuardingB" xml:space="preserve">
    <value>{0} is guarding {1} ...</value>
  </data>
  <data name="AttackingAB" xml:space="preserve">
    <value>Attacking [{0} {1}] ...</value>
  </data>
  <data name="AttackOfWerewolves" xml:space="preserve">
    <value>Attack of Werewolves</value>
  </data>
  <data name="CitizenActions" xml:space="preserve">
    <value>Citizen Actions</value>
  </data>
  <data name="DayADawns" xml:space="preserve">
    <value>Day {0} dawns.</value>
  </data>
  <data name="FactionAWon" xml:space="preserve">
    <value>{0} won.</value>
  </data>
  <data name="GameHasEnded" xml:space="preserve">
    <value>The game has ended.</value>
  </data>
  <data name="ItHasBeenProvedThatKilledAIsB" xml:space="preserve">
    <value>The dead told that {0} was {1}.</value>
  </data>
  <data name="NobodyExecutedBecauseOfInsufficientNumberOfVotes" xml:space="preserve">
    <value>Nobody executed because of the insufficient number of votes.</value>
  </data>
  <data name="NobodyKilledBecauseOfHuntersActivity" xml:space="preserve">
    <value>Nobody killed because of hunter's activity.</value>
  </data>
  <data name="Random" xml:space="preserve">
    <value>(Random)</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value>Hello!</value>
  </data>
  <data name="AIsTrueFriendOfCitizens" xml:space="preserve">
    <value>Your clear mind tells that {0} is a true friend of citizens.</value>
  </data>
  <data name="AHasComeAsB" xml:space="preserve">
    <value>{0} has come as {1}.</value>
  </data>
  <data name="AHasGoneFromB" xml:space="preserve">
    <value>{0} has gone from {1}.</value>
  </data>
  <data name="AHasJoinedAsB" xml:space="preserve">
    <value>{0} has joined as {1}.</value>
  </data>
  <data name="ASenseThatBIsC" xml:space="preserve">
    <value>{0} senses that {1} is {2} in result of a fortune-telling.</value>
  </data>
  <data name="FirstVictimFound" xml:space="preserve">
    <value>The first victim has been found at the crack of dawn. The message of his last moment tells us that inhabitants are the following:</value>
  </data>
  <data name="NotEnoughActorsToVote" xml:space="preserve">
    <value>Not enough actors to vote.</value>
  </data>
  <data name="ThereIsNoWerewolf" xml:space="preserve">
    <value>There is no werewolf.</value>
  </data>
  <data name="PlayLogCSS" xml:space="preserve">
    <value>ul.actors{
    margin: 0;
    padding: 0;
    list-style: none;
}
ul.actors li{
    text-align: center;
    width: 135px;
    height: 64px;
    float: left;
    border: solid 1px #CCC;
    white-space: nowrap;
    overflow: hidden;
}
ul.actors li div.name{
}
ul.actors li table{
    margin-left: auto;
    margin-right: auto;
}

ul.messages{
    margin: 0;
    padding: 0;
    list-style: none;
}
ul.messages li{
    margin: 0;
    padding: 9px 12px;
    background: white;
    border-bottom: solid 1px #e8e8e8;
    color: #333;
}
ul.messages li.mode1 {
    background: #DFD;
}

ul.messages li.mode2 {
    background: #DDD;
}

ul.messages li.mode3 {
    background: #FCF;
}
ul.messages li div.from:after{
    content: "";
    clear: both;
    height: 0;
    display: block;
    visibility: hidden;
}
ul.messages li div.from span.name{
    font-weight: bold;
    font-size: 14px;
}
ul.messages li div.from span.to{
    font-weight: normal;
    font-size: 12px;
    color: #999;
}
ul.messages li div.from span.time{
    float: right;
    font-weight: normal;
    font-size: 12px;
    color: #999;
}
ul.messages li div.body{
    margin-top: 2px;
    font-weight: normal;
    font-size: 14px;
    color: #333;
}</value>
  </data>
  <data name="WelcomeAToBChattingCPlayingDSelectingCharacterE" xml:space="preserve">
    <value>Welcome to {1}, {0}! {2} players are chatting. {3} players are playing. {4} players are selecting characters.</value>
  </data>
  <data name="MatchmakingBegan" xml:space="preserve">
    <value>The matchmaking began.</value>
  </data>
  <data name="WerewolvesRumor" xml:space="preserve">
    <value>There is a rumor that "Werewolves"; human-like predators have infiltrated into this town.</value>
  </data>
  <data name="LogCanBeDownloaded" xml:space="preserve">
    <value>Log can be downloaded from:</value>
  </data>
</root>